{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/Info/Info.module.sass","components/Profile/Profile.module.sass","components/Profile/NewPost/Post/Post.module.sass","components/Profile/NewPost/NewPost.module.sass","images/avatarDownload.svg","components/Profile/NewPost/Post/Post.jsx","components/Profile/NewPost/NewPost.jsx","components/Profile/NewPost/NewPostContainer.jsx","components/Profile/Info/ProfileStatusWithHooks.jsx","components/Profile/Info/ProfileDataForm.jsx","components/Profile/Info/Info.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","auth","module","exports","Post","className","mod","post","postAvatar","src","alt","postText","text","like","likesCount","likes","NewPost","memo","posts","map","el","myPosts","newPost","headline","mainPost","AddPostReduxForm","onSubmit","values","addNewPost","newPostText","reduxForm","form","handleSubmit","input","Field","placeholder","component","Textarea","name","validate","required","maxLength30","button","buttonSignature","propsType","PropTypes","object","addPost","func","updatePost","NewPostContainer","profile","newTextPost","dispatch","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","error","aboutMe","m","formSummaryError","createFieldForm","Input","type","Object","keys","contacts","key","ProfileDataReduxForm","ProfileData","activateEditMode","isOwner","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","Contacts","profileContacts","Info","savePhoto","saveProfile","Preloader","me","profileAvatar","photos","large","profilePhotoLoadButton","target","files","length","avatarDownload","formData","then","initialValues","Profile","ProfileContainer","userId","match","params","getUserProfile","getStatus","prevProps","compose","currentUserId","users","setCurrentUserID","withRouter"],"mappings":"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","file":"static/js/4.c310f7d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if(!this.props.isAuth){\r\n                return <Redirect to='/Login'/>\r\n            } else {\r\n                return <Component {...this.props}/>\r\n            }\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsForRedirect = (state) => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    };\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"me\":\"Info_me__2ZTfT\",\"profileAvatar\":\"Info_profileAvatar__3k_51\",\"aboutMe\":\"Info_aboutMe__BIBX-\",\"name\":\"Info_name__29RWT\",\"profilePhotoLoadButton\":\"Info_profilePhotoLoadButton__cr8nh\",\"profileContacts\":\"Info_profileContacts__3C9HO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3UANi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__2ue2z\",\"postAvatar\":\"Post_postAvatar__-biLs\",\"postText\":\"Post_postText__3gs2Y\",\"like\":\"Post_like__3gI3B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"NewPost_myPosts__2czYr\",\"headline\":\"NewPost_headline__2PnTQ\",\"input\":\"NewPost_input__3rjOC\",\"button\":\"NewPost_button__3ZRAD\",\"buttonSignature\":\"NewPost_buttonSignature__1tyqQ\"};","module.exports = __webpack_public_path__ + \"static/media/avatarDownload.13533ce2.svg\";","import React from 'react';\r\nimport mod from './Post.module.sass';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={mod.post}>\r\n            <div className={mod.postAvatar}><img\r\n                src=\"https://i.pinimg.com/236x/14/74/18/147418a1b8d0417edd5e700c09a33c29.jpg\"\r\n                alt=\"avatar\"/></div>\r\n            <div className={mod.postText}>{props.post.text}</div>\r\n            <button className={mod.like}>like <span>{props.likesCount.likes}</span></button>\r\n        </div>);\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport mod from './NewPost.module.sass';\r\nimport PropTypes from 'prop-types';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength30, required} from \"../../../helpers/Validators\";\r\nimport {Textarea} from \"../../Forms/FormsControl\";\r\n\r\nconst NewPost = React.memo((props) => {\r\n\r\n    let posts = props.posts;\r\n    let post = posts.map(el => <Post post={el} likesCount={el}/>);\r\n\r\n    let addNewPost = (values) => {\r\n        props.addNewPost(values.newPostText);\r\n    };\r\n\r\n    /*let addNewPost = () => {\r\n        props.addPost();\r\n    };\r\n\r\n    let updateNewPost = (e) => {\r\n        let text = e.currentTarget.value;\r\n        props.updatePost(text);\r\n    };*/\r\n\r\n    return (\r\n        <div className={mod.myPosts}>\r\n            <div className={mod.newPost}>\r\n                <div className={mod.headline}>My Posts</div>\r\n                <div className={mod.mainPost}>\r\n                    <AddPostReduxForm onSubmit={addNewPost} />\r\n                </div>\r\n            </div>\r\n            {post}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddPostForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={mod.input}>\r\n                <Field placeholder=\"your news...\" component={Textarea} name='newPostText'\r\n                validate={[required, maxLength30]}/>\r\n                {/*<textarea placeholder=\"your news...\" onChange={updateNewPost}\r\n                                  ref={newPostText} value={props.newTextPost}></textarea>*/}\r\n            </div>\r\n            <div className={mod.button}>\r\n                <button className={mod.buttonSignature}>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm({\r\n  form: 'newPost'\r\n})(AddPostForm);\r\n\r\nexport default NewPost;\r\n\r\nNewPost.propsType = {\r\n    state: PropTypes.object,\r\n    addPost: PropTypes.func,\r\n    updatePost: PropTypes.func\r\n};","import React from 'react';\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport NewPost from \"./NewPost\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profile.posts,\r\n        newTextPost: state.profile.newTextPost\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNewPost: (newPostText) => {\r\n            dispatch(addPost(newPostText));\r\n        }\r\n    }\r\n};\r\n\r\nconst NewPostContainer = connect(mapStateToProps, mapDispatchToProps)(NewPost);\r\n\r\nexport default NewPostContainer;","import React, {useState, useEffect} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div onDoubleClick={activateEditMode}>{props.status || 'No status'}</div>}\r\n            { editMode &&\r\n            <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                   value={status}/>}\r\n        </div>)\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport mod from \"./Info.module.sass\";\r\nimport {createFieldForm, Input, Textarea} from \"../../Forms/FormsControl\";\r\nimport {required} from \"../../../helpers/Validators\";\r\nimport m from '../../Forms/FormsControl.module.sass';\r\n\r\nconst ProfileDataForm = ({profile, handleSubmit, error}) => {\r\n    return <form className={mod.aboutMe} onSubmit={handleSubmit}>\r\n        <button>Save</button>\r\n        {error &&\r\n        <div className={m.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div className={mod.name}>\r\n            {createFieldForm('Full name', 'fullName', Input, [required])}\r\n        </div>\r\n        <div>\r\n            <span>Looking for a job:</span>\r\n            {createFieldForm('', 'lookingForAJob', Input, [], {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <span>My professional skills:</span>\r\n            {createFieldForm('My professional skills', 'lookingForAJobDescription', Textarea, [required])}\r\n        </div>\r\n        <div>\r\n            <span>Contacts:</span> {Object.keys(profile.contacts).map(key => {\r\n            return <div>\r\n                <span>{key}:</span> {createFieldForm(key, 'contacts.' + key, Input)}\r\n            </div>\r\n        })}\r\n        </div>\r\n        <div>\r\n            <span>About me:</span>\r\n            {createFieldForm('About me', 'aboutMe', Textarea, [required])}\r\n        </div>\r\n    </form>\r\n};\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport mod from './Info.module.sass';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport avatarDownload from '../../../images/avatarDownload.svg';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst Info = ({profile, savePhoto, isOwner, status, updateStatus, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoChange = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className={mod.me}>\r\n            <div className={mod.profileAvatar}>\r\n                <img src={profile.photos.large} alt=\"alberto\"/>\r\n                {isOwner &&\r\n                <label className={mod.profilePhotoLoadButton}>\r\n                    <input type='file' onChange={onMainPhotoChange}/>\r\n                    <img src={avatarDownload} alt=\"avatarDownload\"/>\r\n                </label>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            {editMode\r\n                ? <ProfileDataReduxForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\r\n                : <ProfileData profile={profile} activateEditMode={() => {setEditMode(true)}} isOwner={isOwner}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nconst ProfileData = ({profile, activateEditMode, isOwner}) => {\r\n    return <div className={mod.aboutMe}>\r\n        <div className={mod.name}>{profile.fullName}</div>\r\n        <div>\r\n            <span>Looking for a job:</span> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <span>My professional skills:</span> {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <span>Contacts:</span> {Object.keys(profile.contacts).map(key => {\r\n            return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n        <div>\r\n            <span>About me:</span> {profile.aboutMe}\r\n        </div>\r\n        {isOwner && <button onClick={activateEditMode}>Edit</button>}\r\n    </div>\r\n};\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n    return <div className={mod.profileContacts}><span>{contactTitle}:</span> {contactValue}</div>\r\n};\r\n\r\nexport default Info;","import React from 'react';\r\nimport mod from './Profile.module.sass';\r\nimport NewPostContainer from \"./NewPost/NewPostContainer\";\r\nimport Info from \"./Info/Info\";\r\n\r\nconst Profile = (props) => {\r\n    return(\r\n        <div className={mod.profile}>\r\n            <Info savePhoto={props.savePhoto}\r\n                  profile={props.profile}\r\n                  status={props.status}\r\n                  saveProfile={props.saveProfile}\r\n                  updateStatus={props.updateStatus}\r\n                  isOwner={props.isOwner}/>\r\n            <NewPostContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {getStatus, savePhoto, saveProfile, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {setCurrentUserID} from \"../../redux/usersReducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n            /*if(!userId){\r\n                return this.props.history.path('/Login');                         //Программный Redirect\r\n            }*/\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId){\r\n            let userId = this.props.match.params.userId;\r\n            if (!userId) {\r\n                userId = this.props.userId;\r\n            }\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     isOwner={!this.props.match.params.userId}/>\r\n        );\r\n    };\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        userId: state.auth.userId,\r\n        currentUserId: state.users.currentUserId,\r\n        status: state.profile.status\r\n    }\r\n};\r\n/*let WithProfileRedirectComponent = withAuthRedirect(ProfileContainer);\r\nlet WithUrlContainerComponent = withRouter(WithProfileRedirectComponent);\r\nconnect(mapStateToProps, {setProfile, setCurrentUserID})(WithUrlContainerComponent);  //один из вариантов оборачивания компонент контейнерными*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, setCurrentUserID, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}